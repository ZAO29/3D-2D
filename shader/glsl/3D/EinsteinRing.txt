// Author: Bellot Nicolas	
// Title: Einstein ring
 
#ifdef GL_ES
precision mediump float;
#endif
 
#define NB_SPHERE 3
#define MAX_ITER 500
#define PI 3.1416
uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;
 
struct s_sphere
{
    vec4 posRadius;
    float gravity;
    vec3 color;
};
 
float iSphere(in vec3 ro,in vec3 rd, vec4 sph)
{
    //sphere center0 radius r eq <xyz|xyz> = r^2
    // here xyz = ro + t *rd;
    // |ro|^2 + 2t<ro|rd> + t^2|rd|^2 = r^2
    float r = sph.w;
    vec3 roc = ro - sph.xyz;
    float b = 2.*dot(roc,rd);
    float c = dot(roc,roc)-r*r;
    float h = b*b - 4.*c;
    if( h < 0.)
    {
        return -1.;
    }else
    {
        return (-b -sqrt(h))/2.0;
    }
}






bool InsideSphere(in vec3 pos, vec4 sph)
{
    return length(pos -sph.xyz)<=sph.w;
}
 
vec3 nReflect(vec3 normal,vec3 rd)
{
    vec3 normal_v = normalize(normal);
    float t1 = dot(normal_v,rd);
    vec3 rd_tangent = rd - t1*normal_v;
   
    return -2.*t1*normal_v + rd;
}
 
vec3 nSphere(vec3 pos, vec4 sphere)
{
    return normalize(pos - sphere.xyz);
}

vec3 colorPlane(in vec3 pos)
{
     float size = 3.;
        float a = step(mod(pos.x,size),size/2.);
        float b = step(mod(pos.z-a*size/2.,size),size/2.);
        vec3 color = vec3(b);
    return color;
}

vec3 colorSphere(vec3 interPt, vec3 speed, s_sphere s)
{
    vec3 nor = nSphere(interPt,s.posRadius);
    float lightComponent = clamp(dot(-normalize(speed),nor),0.,1.);
    float ambient = 0.5 + 0.5 * nor.y;
    vec3 color = lightComponent * s.color;
    return color;
}


 
int intersect(in vec3 ro, 
              in vec3 speed, 
              in s_sphere a_spheres[NB_SPHERE], 
              out vec3 intersectionPos,
              out vec3 s_color)
{             
 
    int id = -1;
   
    vec3 currentPos = ro;
    vec3 currentSpeed = speed;
    for (int j = 0; j  < MAX_ITER; j++)
    {
        
        currentPos = currentPos + currentSpeed;
        vec3 acceleration = vec3(0.);
        for (int i = 0;i < NB_SPHERE ; i++)
        {
            vec3 distanceVec = a_spheres[i].posRadius.xyz - currentPos;
            
            acceleration += a_spheres[i].gravity*normalize(distanceVec)/dot(distanceVec,distanceVec);
            
            if (InsideSphere(currentPos,a_spheres[i].posRadius))
            {
                id = i;
                vec3 realPos = vec3(0.);
                
                // onre calcule plus precisement l'intersection
                float t = iSphere(currentPos,normalize(speed), a_spheres[i].posRadius);
                intersectionPos = currentPos + t * normalize(speed);
                //intersectionPos = currentPos;
                s_color = colorSphere(intersectionPos,speed,a_spheres[i]);
                
                
                return id;
            }
        }
        
        currentSpeed += acceleration/50.;

	}
    
    return id;
}
 
 

 

 
void main() {
   
    s_sphere s;
    s.posRadius = 0.2*vec4(1.,1.,1.,1);
    
    s_sphere sphereS[NB_SPHERE];
 	vec4 centerRot = vec4(0.,0.,1.,0.);
    float radius = 1.;
    float orbitRadius = 1.;
    
    float angle = u_time/2.0;
    sphereS[0].posRadius = orbitRadius*vec4(sin(angle),0.,cos(angle),radius/orbitRadius)+centerRot;
    sphereS[0].color = vec3(0.,0.,0.);
    sphereS[0].gravity = 1.0;

   
    sphereS[1].posRadius = orbitRadius*vec4(2.*sin(angle-PI),0.,+2.*cos(angle-PI),radius/orbitRadius)+centerRot;
    sphereS[1].color = vec3(1.,1.,1.);
    sphereS[1].gravity = -0.1;
    
    sphereS[2].posRadius = orbitRadius*vec4(2.*sin(angle-PI/2.),0.,+2.*cos(angle-PI/2.),radius/orbitRadius)+centerRot;
    sphereS[2].color = vec3(1.000,0.927,0.029);
    sphereS[2].gravity = 0.0;


   
    vec2 uv = gl_FragCoord.xy/u_resolution.xy;
   
    //ray
    vec3 ro = vec3(0.,0.,4.); //origin of the ray
    vec3 speed = normalize( vec3(-1.0+2.*uv,-1.0))/5.0; // direction of the ray
 
    vec3 color = 0.0*vec3(1.0);
   
    float t =30000000.;
    vec3 pos = ro + t*speed;
    int id = intersect(ro,speed,sphereS,pos,color);
  
    vec3 lightDir = normalize(vec3(15.,1.,0.));
  
    /*if(id >= 0 &&  id < NB_SPHERE)
    {
        for (int i=0;i<NB_SPHERE;i++)
        {
                 // we hit something, we draw white
            if (id == i)
            {
                vec3 nor = nSphere(pos,sphereS[i].posRadius);
                float lightComponent = clamp(dot(lightDir,nor),0.,1.);
                float ambient = 0.5 + 0.5 * nor.y;
                color = lightComponent * sphereS[i].color;
            }

    	}
    }*/
   
    
	
   
    
    //color = vec3(uv.x,uv.y,abs(sin(u_time)));
 
    gl_FragColor = vec4(color,1.0);
}

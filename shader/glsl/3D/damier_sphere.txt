// Author: Bellot Nicolas	

// Title: damier sphere
// made with the book of shader editor

 

#ifdef GL_ES

precision mediump float;

#endif

 

#define NB_SPHERE 1

#define PI 3.1416

uniform vec2 u_resolution;

uniform vec2 u_mouse;

uniform float u_time;

float speed =sin(0.0001*u_time);


float nb_white_stripe = 6.;
float inv_stripe = 1./nb_white_stripe;

 
struct sphereStruct
{
    vec4 posRadius;
    vec3 color;
};
 

 

float iSphere(in vec3 ro,in vec3 rd, vec4 sph)

{

    //sphere center0 radius r eq <xyz|xyz> = r^2

    // here xyz = ro + t *rd;

    // |ro|^2 + 2t<ro|rd> + t^2|rd|^2 = r^2

    float r = sph.w;

    vec3 roc = ro - sph.xyz;

    float b = 2.*dot(roc,rd);

    float c = dot(roc,roc)-r*r;

    float h = b*b - 4.*c;

    if( h < 0.)

    {

        return -1.;

    }else

    {

        return (-b -sqrt(h))/2.0;

    }

}

 

 

 

float iPlane(in vec3 ro,in vec3 rd)

{

    return -ro.y/rd.y;

}

 

 

 

vec3 nReflect(vec3 normal,vec3 rd)

{

    vec3 normal_v = normalize(normal);

    float t1 = dot(normal_v,rd);

    vec3 rd_tangent = rd - t1*normal_v;

   

    

    //return vec3(0.);

   

    return -2.*t1*normal_v + rd;

}

 

vec3 nSphere(vec3 pos, vec4 sphere)

{

    return normalize(pos - sphere.xyz);

}

 

vec3 nPlane(vec3 pos)

{

    return vec3(0.,1.,0.);

}

 
vec3 colorPlane(in vec3 pos)
{
     float size = 3.;
        float a = step(mod(pos.x,size),size/2.);
        float b = step(mod(pos.z-a*size/2.,size),size/2.);
        vec3 color = vec3(b);
    return color;
}
 

vec4 sphere = vec4(2.+2.*sin(u_time),2.,-5.+2.*cos(u_time),2.);

 

int intersect(in vec3 ro, in vec3 rd, out float resT, sphereStruct a_spheres[NB_SPHERE], int id_avoid)

{             

 

    int id = -1;

   

    

    

    for (int i = 0;i < NB_SPHERE ; i++)

    {

        float tSph = iSphere(ro,rd, a_spheres[i].posRadius);//intersect sphere

        if (tSph >0.0 && tSph < resT && i != id_avoid)

        {

            resT = tSph;

            id = i;

        }

    }

    int a = 1;

    //vec4 alpha = a_spheres[a];

    //

    float tPla = iPlane(ro,rd);

   

    if ( tPla > 0.0 && tPla < resT && (id_avoid != NB_SPHERE))

    {

        id = NB_SPHERE;

        resT = tPla;

    }

   

    return id;

}

 

 

 

 

vec3 findColor(vec3 pos, int id ,vec4 a_spheres[NB_SPHERE],vec3 lightDir,vec3 colorSphereS[NB_SPHERE])

{

    vec3 color;

   for (int i=0;i<NB_SPHERE;i++)

    {

                 // we hit something, we draw white

            if (id == i)

            {

                    vec3 nor = nSphere(pos,a_spheres[i]);

                    float lightComponent = clamp(dot(lightDir,nor),0.,1.);

                    color = colorSphereS[i]*lightComponent;

               

                                return color;

            }

    }
    
    
    if (id == NB_SPHERE)
    {
        return colorPlane(pos);
    }

}

mat3 rotationMatrix(vec3 axis, float angle)
{
    axis /= length(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);
}



vec3 colorInterp[6];



vec3 getSphereColor(float theta,float phi)
{
    colorInterp[0]=vec3(1.,0.,0.);
    colorInterp[1]=vec3(1.,0.,1.);
	colorInterp[2]=vec3(0.,1.,0.);
    colorInterp[3]=vec3(0.,1.,1.);
    colorInterp[4]=vec3(0.,0.,1.);
    colorInterp[5]=vec3(1.,1.,0.);
   
    
    float c = step(mod(theta,inv_stripe),inv_stripe/2.);
	float b =  step(mod(phi-c*inv_stripe/2.,inv_stripe),inv_stripe/2.);

    float nb_color = 6.;
    
    int id = int(floor(theta*nb_color));
    float t = mod(theta*nb_color,1.);
    
    id =int(mod(float(id),float(nb_color)));
    int id1 = int(mod(float(id+1),float(nb_color)));
    
    vec3 color;
    
    if (id == 0)
    {
        //color = colorInterp[0]*(1.-t)+t*colorInterp[1];
        color = colorInterp[0];
    }
    
    if (id == 1)
    {
        //color = colorInterp[1]*(1.-t)+t*colorInterp[2];
         color = colorInterp[1];
    }
    
	if (id == 2)
    {
        //color = colorInterp[2]*(1.-t)+t*colorInterp[0];
         color = colorInterp[2];
    }
    
    if (id == 3)
    {
        //color = colorInterp[2]*(1.-t)+t*colorInterp[0];
         color = colorInterp[3];
    }
    
     if (id == 4)
    {
        //color = colorInterp[2]*(1.-t)+t*colorInterp[0];
         color = colorInterp[4];
    }
    
    if (id == 5)
    {
        //color = colorInterp[2]*(1.-t)+t*colorInterp[0];
         color = colorInterp[5];
    }
    

    color *= b;
    
    return color;
}
 

 vec4 getColorAndT(vec3 ro,vec2 uv,sphereStruct sphereS[NB_SPHERE])
{
    
     
     vec3 rd = normalize( vec3(-1.0+2.*uv,-1.0)); // direction of the ray
    float t =30000000.;

    int id_avoid = -1;

    int id = intersect(ro,rd,t,sphereS,id_avoid);

  

    vec3 pos = ro + t*rd;

    vec3 color = vec3(0.);

    vec3 lightDir = normalize(vec3(15.,1.,0.));

  

    if(id >= 0 &&  id < NB_SPHERE)
    {

                for (int i=0;i<NB_SPHERE;i++)

                {

                 // we hit something, we draw white

            if (id == i)
                            {
				
                vec3 norD = nSphere(pos,sphereS[i].posRadius);
                
                mat3 rot =rotationMatrix(vec3(0.8,0.5,0.) ,PI/3.);
                
                vec3 nor =rot*norD;
                
                float theta = mod(atan(nor.z,nor.x),2.*PI)/(PI)+u_time*speed;
                float phi = mod(atan(nor.y,length(nor.xz)),2.*PI)/(PI);
               // float c = step(mod(theta,inv_stripe),inv_stripe/2.);
               // float b = step(mod(phi-c*inv_stripe/2.,inv_stripe),inv_stripe/2.);
                
                float ampl = 0.04*cos(0.5*u_time)*PI;
                //int nb_pt = int(10.*ampl/(0.1*PI));
                int nb_pt = 20;
                vec3 b = vec3(0.);
                for (int i =0; i < 100;i++)
                {
                    if (i < nb_pt)
                    b +=  getSphereColor(theta+float(i)*ampl/float(nb_pt),phi);
                    
                    //if (i < nb_pt)
                     //   break;
                    
                    
                }
                
                b/=float(nb_pt);

                
                /*float b1 = getSphereColor(theta+ampl,phi);
                float b2 = getSphereColor(theta-ampl,phi);
                float b3 = getSphereColor(theta+ampl/2.,phi);
                float b4 = getSphereColor(theta-ampl/2.,phi);
                
                
                float b = (b1+b2+b3+b4)/4.;*/
                
    float lightComponent = clamp(dot(lightDir,norD),0.,1.);

                                float ambient = 0.5 + 0.5 * nor.y;

                                
                 				color = 0.2*vec3(b)+vec3(b)*lightComponent;

                					//color = b;
               

                /*vec3 rd_reflection = nReflect(nor,rd);

                float t1 = 100000.;

                int id_ref = intersect(pos,rd_reflection,t1,sphereS,id);

                vec3 pos_ref = pos + t1 * rd_reflection;

                if(id_ref >= 0 &&  id_ref <= NB_SPHERE)
                {
                                   vec3 col = findColor(pos_ref,id_ref,sphereS,lightDir,colorSphereS);
                   
                    color += col/4.;
                }*/
                
                           }

               

                }

    }
    
	

    
    
    return vec4(color.x,color.y,color.z,t);
}



void main() {

   

    sphereStruct sphereS[NB_SPHERE];

    

   

 

    sphereS[0].posRadius = vec4(0.,2.,-5.,2.);
    sphereS[0].color = vec3(.1,1.,1.);

   



   

    vec2 uv = gl_FragCoord.xy/u_resolution.xy;

   

    //ray

    vec3 ro = vec3(0.,1.,0.5); //origin of the ray

    
    

 

vec4 colorTcenter = getColorAndT(ro,uv,sphereS);




    gl_FragColor = vec4(colorTcenter);
    //gl_FragColor = vec4(vec3(coeff2/25.),1.0);

}





 
